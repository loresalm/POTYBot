#bullish = crescente #bearish = decrescente from binance.client import Clientfrom datetime import datetimeimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom matplotlib.path import Pathimport matplotlib.patches as patchesclass Candles():	#class variables 	Candles_list = []	time = []#################################################################################	#constructor for the class Candles	#@Param: priceList: a pandas list with the format: 4 lines of prices [open, high, low, close]	#						   each column represent a step of time  	def __init__(self,priceList,_time):		self.time = _time		self.Heikin_Ashi_Candle_generator(priceList, _time)#################################################################################	def Heikin_Ashi_Candle_generator(self,priceList,time):		#priceHA list composition: [[all the 'OPEN'],[all the 'HIGH'],[all the 'LOW'],[all the 'CLOSE']]		self.Candles_list=[priceList[0],priceList[1],priceList[2],priceList[3]] 		#Heikin-Ashi Candle Calculations on First Run		self.Candles_list[0][0]= (priceList[0][0] + priceList[3][0]) / 2		self.Candles_list[1][0]= priceList[1][0]		self.Candles_list[2][0]= priceList[2][0]		self.Candles_list[3][0]= (priceList[0][0] + priceList[1][0] + priceList[2][0] + priceList[3][0]) / 4		#Heikin-Ashi Candle Calculations for the rest of time		for i in range(1, len(time)):			self.Candles_list[0][i]= (self.Candles_list[0][i-1] + self.Candles_list[3][i-1]) / 2			self.Candles_list[3][i]= (priceList[0][i] + priceList[1][i] + priceList[2][i] + priceList[3][i]) / 4			self.Candles_list[1][i]= max(priceList[1][i],self.Candles_list[0][i],self.Candles_list[3][i])			self.Candles_list[2][i]= min(priceList[2][i],self.Candles_list[0][i],self.Candles_list[3][i])#################################################################################	def vertsCreator(self,priceHA,dt):		verts = [			(self.time[dt],self.Candles_list[3][dt]),			(self.time[dt]-0.1,self.Candles_list[3][dt]), 						(self.time[dt]-0.1,self.Candles_list[1][dt]),  			(self.time[dt]-0.105,self.Candles_list[1][dt]),			(self.time[dt]-0.105,self.Candles_list[3][dt]),			(self.time[dt]-0.2,self.Candles_list[3][dt]),			(self.time[dt]-0.2,self.Candles_list[0][dt]),			(self.time[dt]-0.105,self.Candles_list[0][dt]),			(self.time[dt]-0.105,self.Candles_list[2][dt]),			(self.time[dt]-0.1,self.Candles_list[2][dt]),			(self.time[dt]-0.1,self.Candles_list[0][dt]),			(self.time[dt],self.Candles_list[0][dt]),			(self.time[dt],self.Candles_list[3][dt]),			]		return verts########################################################################	def codesCreator(self):		codes = [			Path.MOVETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.LINETO,			Path.CLOSEPOLY,			]		return codes########################################################################	def drow(self,HACandleGraph, color, dt):		verts = self.vertsCreator(self.Candles_list,dt)		codes = self.codesCreator()		path = Path(verts, codes)		patch = patches.PathPatch(path, facecolor= color, lw=0.2)		HACandleGraph.add_patch(patch)########################################################################	def getCandlesList(self):		return self.Candles_list